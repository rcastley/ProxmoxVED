# Copyright (c) 2021-2025 tteck
# Author: tteck (tteckster)
# Co-Author: MickLesk
# License: MIT
# https://github.com/community-scripts/ProxmoxVED/raw/main/LICENSE

source <(curl -fsSL https://raw.githubusercontent.com/community-scripts/ProxmoxVED/raw/branch/main/misc/core.func)
load_functions

# This function sets color variables for formatting output in the terminal
# color() {
#   # Colors
#   YW=$(echo "\033[33m")
#   YWB=$(echo "\033[93m")
#   BL=$(echo "\033[36m")
#   RD=$(echo "\033[01;31m")
#   GN=$(echo "\033[1;92m")

#   # Formatting
#   CL=$(echo "\033[m")
#   BFR="\\r\\033[K"
#   BOLD=$(echo "\033[1m")
#   TAB="  "

#   # System
#   RETRY_NUM=10
#   RETRY_EVERY=3
#   i=$RETRY_NUM

#   # Icons
#   CM="${TAB}✔️${TAB}${CL}"
#   CROSS="${TAB}✖️${TAB}${CL}"
#   INFO="${TAB}💡${TAB}${CL}"
#   NETWORK="${TAB}📡${TAB}${CL}"
#   OS="${TAB}🖥️${TAB}${CL}"
#   OSVERSION="${TAB}🌟${TAB}${CL}"
#   HOSTNAME="${TAB}🏠${TAB}${CL}"
#   GATEWAY="${TAB}🌐${TAB}${CL}"
#   DEFAULT="${TAB}⚙️${TAB}${CL}"
# }

# Function to set STD mode based on verbosity
set_std_mode() {
  if [ "$VERBOSE" = "yes" ]; then
    STD=""
  else
    STD="silent"
  fi
}

# Silent execution function
silent() {
  "$@" >/dev/null 2>&1
}

# This function enables IPv6 if it's not disabled and sets verbose mode
verb_ip6() {
  set_std_mode # Set STD mode based on VERBOSE

  if [ "$DISABLEIPV6" == "yes" ]; then
    $STD sysctl -w net.ipv6.conf.all.disable_ipv6=1
    echo "net.ipv6.conf.all.disable_ipv6 = 1" >>/etc/sysctl.conf
    $STD rc-update add sysctl default
  fi
}

# This function catches errors and handles them with the error handler function
catch_errors() {
  unset SPINNER_PID
  set -Eeuo pipefail
  trap 'error_handler $LINENO "$BASH_COMMAND"' ERR
}

# This function handles errors
error_handler() {
  local exit_code="$?"
  local line_number="$1"
  local command="$2"
  local error_message="${RD}[ERROR]${CL} in line ${RD}$line_number${CL}: exit code ${RD}$exit_code${CL}: while executing command ${YW}$command${CL}"
  echo -e "\n$error_message\n"
  [[ -n "${SPINNER_PID:-}" ]] && kill "$SPINNER_PID" &>/dev/null || true
}

# # This function displays an informational message with logging support.
# declare -A MSG_INFO_SHOWN
# SPINNER_ACTIVE=0
# SPINNER_PID=""
# SPINNER_MSG=""

# trap 'stop_spinner' EXIT INT TERM HUP

# start_spinner() {
#   local msg="$1"
#   local frames=(⠋ ⠙ ⠹ ⠸ ⠼ ⠴ ⠦ ⠧ ⠇ ⠏)
#   local spin_i=0
#   local interval=0.1

#   SPINNER_MSG="$msg"
#   printf "\r\e[2K" >&2

#   {
#     while [[ "$SPINNER_ACTIVE" -eq 1 ]]; do
#       printf "\r\e[2K%s %b" "${frames[spin_i]}" "${YW}${SPINNER_MSG}${CL}" >&2
#       spin_i=$(((spin_i + 1) % ${#frames[@]}))
#       sleep "$interval"
#     done
#   } &

#   SPINNER_PID=$!
#   disown "$SPINNER_PID"
# }

# stop_spinner() {
#   if [[ ${SPINNER_PID+v} && -n "$SPINNER_PID" ]] && kill -0 "$SPINNER_PID" 2>/dev/null; then
#     kill "$SPINNER_PID" 2>/dev/null
#     sleep 0.1
#     kill -0 "$SPINNER_PID" 2>/dev/null && kill -9 "$SPINNER_PID" 2>/dev/null
#     wait "$SPINNER_PID" 2>/dev/null || true
#   fi
#   SPINNER_ACTIVE=0
#   unset SPINNER_PID
# }

# spinner_guard() {
#   if [[ "$SPINNER_ACTIVE" -eq 1 ]] && [[ -n "$SPINNER_PID" ]]; then
#     kill "$SPINNER_PID" 2>/dev/null
#     wait "$SPINNER_PID" 2>/dev/null || true
#     SPINNER_ACTIVE=0
#     unset SPINNER_PID
#   fi
# }

# msg_info() {
#   local msg="$1"
#   [[ -n "${MSG_INFO_SHOWN["$msg"]+x}" ]] && return
#   MSG_INFO_SHOWN["$msg"]=1

#   spinner_guard
#   SPINNER_ACTIVE=1
#   start_spinner "$msg"
# }

# msg_ok() {
#   local msg="$1"
#   stop_spinner
#   printf "\r\e[2K%s %b\n" "${CM}" "${GN}${msg}${CL}" >&2
#   unset MSG_INFO_SHOWN["$msg"]
# }

# msg_error() {
#   stop_spinner
#   local msg="$1"
#   printf "\r\e[2K%s %b\n" "${CROSS}" "${RD}${msg}${CL}" >&2
#   #log_message "ERROR" "$msg"
# }

# This function sets up the Container OS by generating the locale, setting the timezone, and checking the network connection
setting_up_container() {
  msg_info "Setting up Container OS"
  while [ $i -gt 0 ]; do
    if [ "$(ip addr show | grep 'inet ' | grep -v '127.0.0.1' | awk '{print $2}' | cut -d'/' -f1)" != "" ]; then
      break
    fi
    echo 1>&2 -en "${CROSS}${RD} No Network! "
    sleep $RETRY_EVERY
    i=$((i - 1))
  done

  if [ "$(ip addr show | grep 'inet ' | grep -v '127.0.0.1' | awk '{print $2}' | cut -d'/' -f1)" = "" ]; then
    echo 1>&2 -e "\n${CROSS}${RD} No Network After $RETRY_NUM Tries${CL}"
    echo -e "${NETWORK}Check Network Settings"
    exit 1
  fi
  msg_ok "Set up Container OS"
  msg_ok "Network Connected: ${BL}$(ip addr show | grep 'inet ' | awk '{print $2}' | cut -d'/' -f1 | tail -n1)${CL}"
}

# This function checks the network connection by pinging a known IP address and prompts the user to continue if the internet is not connected
network_check() {
  set +e
  trap - ERR
  if ping -c 1 -W 1 1.1.1.1 &>/dev/null || ping -c 1 -W 1 8.8.8.8 &>/dev/null || ping -c 1 -W 1 9.9.9.9 &>/dev/null; then
    msg_ok "Internet Connected"
  else
    msg_error "Internet NOT Connected"
    read -r -p "Would you like to continue anyway? <y/N> " prompt
    if [[ "${prompt,,}" =~ ^(y|yes)$ ]]; then
      echo -e "${INFO}${RD}Expect Issues Without Internet${CL}"
    else
      echo -e "${NETWORK}Check Network Settings"
      exit 1
    fi
  fi
  RESOLVEDIP=$(getent hosts github.com | awk '{ print $1 }')
  if [[ -z "$RESOLVEDIP" ]]; then msg_error "DNS Lookup Failure"; else msg_ok "DNS Resolved github.com to ${BL}$RESOLVEDIP${CL}"; fi
  set -e
  trap 'error_handler $LINENO "$BASH_COMMAND"' ERR
}

# This function updates the Container OS by running apt-get update and upgrade
update_os() {
  msg_info "Updating Container OS"
  $STD apk update
  $STD apk upgrade
  msg_ok "Updated Container OS"

  msg_info "Installing core dependencies"
  $STD apk update
  $STD apk add newt curl openssh nano mc ncurses
  msg_ok "Core dependencies installed"
}

# This function modifies the message of the day (motd) and SSH settings
motd_ssh() {
  echo "export TERM='xterm-256color'" >>/root/.bashrc
  IP=$(ip -4 addr show eth0 | awk '/inet / {print $2}' | cut -d/ -f1 | head -n 1)

  if [ -f "/etc/os-release" ]; then
    OS_NAME=$(grep ^NAME /etc/os-release | cut -d= -f2 | tr -d '"')
    OS_VERSION=$(grep ^VERSION_ID /etc/os-release | cut -d= -f2 | tr -d '"')
  else
    OS_NAME="Alpine Linux"
    OS_VERSION="Unknown"
  fi

  PROFILE_FILE="/etc/profile.d/00_lxc-details.sh"
  echo "echo -e \"\"" >"$PROFILE_FILE"
  echo -e "echo -e \"${BOLD}${YW}${APPLICATION} LXC Container - DEV Repository${CL}\"" >>"$PROFILE_FILE"
  echo -e "echo -e \"${RD}WARNING: This is a DEVELOPMENT version (ProxmoxVED). Do NOT use in production!${CL}\"" >>"$PROFILE_FILE"
  echo -e "echo -e \"${YW} OS: ${GN}${OS_NAME} - Version: ${OS_VERSION}${CL}\"" >>"$PROFILE_FILE"
  echo -e "echo -e \"${YW} Hostname: ${GN}\$(hostname)${CL}\"" >>"$PROFILE_FILE"
  echo -e "echo -e \"${YW} IP Address: ${GN}${IP}${CL}\"" >>"$PROFILE_FILE"
  echo -e "echo -e \"${YW} Repository: ${GN}https://github.com/community-scripts/ProxmoxVED${CL}\"" >>"$PROFILE_FILE"
  echo "echo \"\"" >>"$PROFILE_FILE"

  if [[ "${SSH_ROOT}" == "yes" ]]; then
    $STD rc-update add sshd
    sed -i "s/#PermitRootLogin prohibit-password/PermitRootLogin yes/g" /etc/ssh/sshd_config
    $STD /etc/init.d/sshd start
  fi
}

# Validate Timezone for some LXC's
validate_tz() {
  [[ -f "/usr/share/zoneinfo/$1" ]]
}

# This function customizes the container and enables passwordless login for the root user
customize() {
  if [[ "$PASSWORD" == "" ]]; then
    msg_info "Customizing Container"
    passwd -d root >/dev/null 2>&1

    # Ensure agetty is available
    apk add --no-cache --force-broken-world util-linux >/dev/null 2>&1

    # Create persistent autologin boot script
    mkdir -p /etc/local.d
    cat <<'EOF' >/etc/local.d/autologin.start
#!/bin/sh
sed -i 's|^tty1::respawn:.*|tty1::respawn:/sbin/agetty --autologin root --noclear tty1 38400 linux|' /etc/inittab
kill -HUP 1
EOF
    touch /root/.hushlogin

    chmod +x /etc/local.d/autologin.start
    rc-update add local >/dev/null 2>&1

    # Apply autologin immediately for current session
    /etc/local.d/autologin.start

    msg_ok "Customized Container"
  fi

  echo "bash -c \"\$(curl -fsSL https://github.com/community-scripts/ProxmoxVED/raw/main/ct/${app}.sh)\"" >/usr/bin/update
  chmod +x /usr/bin/update
}
